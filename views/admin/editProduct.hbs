
{{!-- 
<div class="container">

 <form id="formnvnv" action="/admin/editproduct/{{Product._id}}" method="post" style="margin-left:18rem;width:19rem" >
        <label for="">Product Name:</label><br>
         <input type="text" name="name" id="username1" tabindex="1" class="form-control" value={{Product.name}} required>
        <label for="">Category Name:</label><br>
          <select  style="width:18.8rem;"  name="category"> 
          {{#each categoryDatas }}
          <option>{{this.name}}</option>
          {{/each}}
        <label for="">Price:</label><br>
         <input type="text" name="price" id="username1" tabindex="1" class="form-control" value={{Product.price}} required>
         <label for="">Brand </label>
         <input type="text" name="brand" id="description" class="form-control" value={{Product.brand}}  required>
         <label for="">Image: </label><br>
         <img src={{Product.images}} style="height:71px;width:88px" ><br><br>
         <input type="file" id="description" style="width: 18.9rem;" value={{Product.brand}} class="form-control" >
         <input type="hidden" name="image" id="description" style="width: 18.9rem;" value={{Product.images}} class="form-control" >
         <p id="errorId" ></p>
           <p>{{errorr}}</p>
        <button type="submit" class="btn btn-primary">Submit</button>
      </form>


      </div> --}}





 <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>
     



<div class="container-fluid position-relative d-flex p-0">
    <!-- Spinner Start -->
    <div id="spinner"
        class="show bg-light position-fixed translate-middle w-100 vh-100 top-50 start-50 d-flex align-items-center justify-content-center">
        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
    <!-- Spinner End -->
    <!-- Content Start -->
    <div class="content">
        <!-- Navbar Start -->
        <nav class="navbar navbar-expand bg-secondary navbar-dark sticky-top px-4 py-0">
            <a href="/admin" class="navbar-brand d-flex d-lg-none me-4">
                <h2 class="text-primary mb-0"><i class="fa fa-user-edit"></i></h2>
            </a>
            <a href="#" class="sidebar-toggler flex-shrink-0">
                <i class="fa fa-bars"></i>
            </a>
        </nav>
        <!-- Navbar End -->
        <div class="container">
            <div class="col-12" style="margin-top:3rem">
                <div class="bg-secondary rounded h-100 p-4">
                <div class="container">




       <form  action="/admin/editproduct/{{Product._id}}"  enctype="multipart/form-data" autocomplete="off"   method="post" style="margin-left:18rem;width:19rem" >
        <label for="">Product Name:</label><br>
         <input type="text" name="name" id="username1" tabindex="1" class="form-control" value={{Product.name}} required>
        <label for="">Category Name:</label><br>
          <select  style="width:18.8rem;"  name="category"> 
          {{#each categoryDatas }}
          <option>{{this.name}}</option>
          {{/each}}
        <label for="">Price:</label><br>
         <input type="text" name="price" id="username1" tabindex="1" class="form-control" value={{Product.price}} required>
         <label for="">Brand </label>
         <input type="text" name="brand" id="description" class="form-control" value={{Product.brand}}  required>
         <label for="">Image: </label><br>
         <img src={{Product.images.[0]}} style="height:71px;width:88px" ><br><br>
          <p>{{errorr}}</p>
        <button type="submit" class="btn btn-primary">Submit</button>
        
            {{!-- image crop --}}

            <div class="d-flex">

            <div class="mt-5  col-md-4">
                <label for="productimage" class="">
                Image
                </label>

                <input type="file"  id="id_image1" name="image1" accept="image/*" class="form-control"
                onchange="viewImage1(event)" style="width:100%;"><br>
                <img src="" id="imgView1" alt="" class="clr" style="height:100px">

                <div class="vald-info" id="info"></div>
                <h5 class="error_form text-danger" id="image1_error_message"></h5>
                <div style="display:flex">
                <div id="image-box1" class="clr image-container" style="height: 300px; width:20%"></div>
                <button type="button" class="btn btn-outline-info" id="crop-btn1" style=" margin-top: 10px;  display: none;
                                            width:  50% ; margin: 20rem 0rem 0rem 0rem;">Crop</button>
                </div>
            </div>

         





            </div>



         <input type="hidden" id="description" name="dbimage1" style="width: 18.9rem;" value={{Product.images.[0]}}  class="form-control" >
         <input type="hidden" id="description" name="dbimage2" style="width: 18.9rem;" value={{Product.images.[1]}}  class="form-control" >
         <input type="hidden" id="description" name="dbimage3" style="width: 18.9rem;" value={{Product.images.[2]}}  class="form-control" >
         <p id="errorId" ></p>
          
      </form>


                </div>
                </div>
            </div>
        </div>
        <!-- Back to Top -->
        <a href="#" class="btn btn-lg btn-primary btn-lg-square back-to-top"><i class="bi bi-arrow-up"></i></a>
    </div>







    
    


<script>
  const imagebox1 = document.getElementById('image-box1')
  const crop_btn1 = document.getElementById('crop-btn1')
  const input1 = document.getElementById('id_image1')
  function viewImage1(event) {
    var fileInput1 = document.getElementById('id_image1');
    var filePath1 = fileInput1.value;
    var allowedExtensions =
      /(\.jpg|\.jpeg|\.png|\.gif|\.jfif|\.webp)$/i;
    if (!allowedExtensions.exec(filePath1)) {
      fileInput1.value = '';
      swal("There is a problem!", "Please choose image file.");
      return false;
    } else {
      document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
    }
  }
  // When user uploads the image this event will get triggered
  input1.addEventListener('change', () => {
    // Getting image file object from the input variable
    const img_data1 = input1.files[0]
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url1 = URL.createObjectURL(img_data1)
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox1.innerHTML = `<img src="${url1}" id="image1" style="width:100%;">`
    // Storing that cropping view image in a variable
    const image1 = document.getElementById('image1')
    // Displaying the image box
    document.getElementById('image-box1').style.display = 'block'
    // Displaying the Crop buttton
    document.getElementById('crop-btn1').style.display = 'block'
    document.getElementById('imgView1').style.display = 'block'
    // Hiding the Post button
    const cropper1 = new Cropper(image1, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
      aspectRatio: 1 / 1,
    })
    // When crop button is clicked this event will get triggered
    crop_btn1.addEventListener('click', () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper1.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement1 = document.getElementById('id_image1');
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file1 = new File([blob], img_data1.name, { type: "image/*", lastModified: new Date().getTime() });
        // Create a new container
        let container1 = new DataTransfer();
        // Add the cropped image file to the container
        container1.items.add(file1);
        // Replace the original image file with the new cropped image file
        fileInputElement1.files = container1.files;
        document.getElementById('imgView1').src = URL.createObjectURL(fileInputElement1.files[0])
        // Hide the cropper box
        document.getElementById('image-box1').style.display = 'none'
        // Hide the crop button
        document.getElementById('crop-btn1').style.display = 'none'
      })
    })
  })
  const imagebox2 = document.getElementById('image-box2')
  const crop_btn2 = document.getElementById('crop-btn2')
  const input2 = document.getElementById('id_image2')
  function viewImage2(event) {
    var fileInput2 = document.getElementById('id_image2');
    var filePath2 = fileInput2.value;
    var allowedExtensions =
      /(\.jpg|\.jpeg|\.png|\.gif|\.jfif|\.webp)$/i;
    if (!allowedExtensions.exec(filePath2)) {
      fileInput1.value = '';
      swal("There is a problem!", "Please choose image file.");
      return false;
    } else {
      document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])
    }
  }
  // When user uploads the image this event will get triggered
  input2.addEventListener('change', () => {
    // Getting image file object from the input variable
    const img_data2 = input2.files[0]
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url2 = URL.createObjectURL(img_data2)
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox2.innerHTML = `<img src="${url2}" id="image2" style="width:100%;">`
    // Storing that cropping view image in a variable
    const image2 = document.getElementById('image2')
    // Displaying the image box
    document.getElementById('image-box2').style.display = 'block'
    // Displaying the Crop buttton
    document.getElementById('crop-btn2').style.display = 'block'
    document.getElementById('imgView2').style.display = 'block'
    // Hiding the Post button
    const cropper2 = new Cropper(image2, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
      aspectRatio: 1 / 1,
    })
    // When crop button is clicked this event will get triggered
    crop_btn2.addEventListener('click', () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper2.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement2 = document.getElementById('id_image2');
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file2 = new File([blob], img_data2.name, { type: "image/*", lastModified: new Date().getTime() });
        // Create a new container
        let container2 = new DataTransfer();
        // Add the cropped image file to the container
        container2.items.add(file2);
        // Replace the original image file with the new cropped image file
        fileInputElement2.files = container2.files;
        document.getElementById('imgView2').src = URL.createObjectURL(fileInputElement2.files[0])
        // Hide the cropper box
        document.getElementById('image-box2').style.display = 'none'
        // Hide the crop button
        document.getElementById('crop-btn2').style.display = 'none'
      })
    })
  })
  const imagebox3 = document.getElementById('image-box3')
  const crop_btn3 = document.getElementById('crop-btn3')
  const input3 = document.getElementById('id_image3')
  function viewImage3(event) {
    var fileInput3 = document.getElementById('id_image3');
    var filePath3 = fileInput3.value;
    var allowedExtensions =
      /(\.jpg|\.jpeg|\.png|\.gif|\.jfif|\.webp)$/i;
    if (!allowedExtensions.exec(filePath3)) {
      fileInput3.value = '';
      swal("There is a problem!", "Please choose image file.");
      return false;
    } else {
      document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])
    }
  }
  // When user uploads the image this event will get triggered
  input3.addEventListener('change', () => {
    // Getting image file object from the input variable
    const img_data3 = input3.files[0]
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url3 = URL.createObjectURL(img_data3)
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox3.innerHTML = `<img src="${url3}" id="image3" style="width:100%;">`
    // Storing that cropping view image in a variable
    const image3 = document.getElementById('image3')
    // Displaying the image box
    document.getElementById('image-box3').style.display = 'block'
    // Displaying the Crop buttton
    document.getElementById('crop-btn3').style.display = 'block'
    // Hiding the Post button
    const cropper3 = new Cropper(image3, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
      aspectRatio: 1 / 1,
    })
    // When crop button is clicked this event will get triggered
    crop_btn3.addEventListener('click', () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper3.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement3 = document.getElementById('id_image3');
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file3 = new File([blob], img_data3.name, { type: "image/*", lastModified: new Date().getTime() });
        // Create a new container
        let container3 = new DataTransfer();
        // Add the cropped image file to the container
        container3.items.add(file3);
        // Replace the original image file with the new cropped image file
        fileInputElement3.files = container3.files;
        document.getElementById('imgView3').src = URL.createObjectURL(fileInputElement3.files[0])
        // Hide the cropper box
        document.getElementById('image-box3').style.display = 'none'
        // Hide the crop button
        document.getElementById('crop-btn3').style.display = 'none'
        document.getElementById('imgView3').style.display = 'block'
      })
    })
  })
</script>